import os
import os.path
import PIL
from PIL import Image
from beet.library.resource_pack import FragmentShader, VertexShader, Shader, GlslShader, Texture
from bolt.contrib.defer import Defer
from bolt_expressions import Scoreboard
import lib:global/scoreboard as scb
import lib:global/utils as utils

# Documentación:
# Esta librería crea shaders de forma dinámica.
# Un shader se puede crear corriendo este comando:
# foo = PostShader(source, min, max, name)
# source: bolt expression. Es el scoreboard que le da los valores al shader.
# min: valor mínimo que lee el shader.
# max: valor máximo que lee el shader.
# name: nombre del shader.
#
# Todos los parámetros son obligatorios.
# En una función luego se escribe foo.update() (o se agrega el shdr. si
# es en un archivo que importa esta librería) para que el shader lea
# lo que hay en el scoreboard. Es importante que el update esté dentro
# de una función con un @s ya definido
# 
# El shader en sí mismo se agrega a la carpeta shaders. Cada línea debe
# empezar con 8 espacios. El parámetro que lleva el número leído del
# scoreboard es control_color.b.
# Si se quiere usar el parámetro de tiempo, hay que leer los colores del
# ControlSampler en la fila 1.
#
# Para crear un overlay, se agrega una imagen en formato .png a la carpeta
# shaders/overlays. Es preferible que su nombre empiece con mayúscula.
# En los shaders se puede leer la imagen poniendo el nombre de la imagen
# seguido de "Sampler". Ejemplo: La imagen se llama Hola, así que se lee
# escribiendo HolaSampler. 


defer = ctx.inject(Defer)
ASSETS_PATH = ctx.directory / f"res/assets/mcgame"
CURRENT_PATH = ctx.directory / "src/data/lib/modules/gui"
NAMESPACE = f"mcgame:shader"


class Color:
    def __init__(self, r, g, b):  # Los colores toman valores de 0 a 255.
        self.r = r
        self.g = g
        self.b = b

    def __eq__(self, other):
        return self.r == other.r and self.g == other.g and self.b == other.b

    def __repr__(self):
        return f"({self.r}, {self.g}, {self.b})"

    def play(self):
        r = self.r/255
        g = self.g/255
        b = self.b/255
        particle minecraft:entity_effect ~ ~ ~ r g b 1 0 force @s


def _color_generator(input = None):
    for i in range(253, -1, -1):
        for j in range(0, 256):
            yield Color(254, i, j)


def _channel_generator(input = None):
    i = 0
    while True:
        i += 1
        yield i


class PostShader:
    all_shaders = set()

    def __init__(self, source, max, name, directory=""):
        self.name = name
        self.source = source
        self.max = max
        self.values = []
        self.directory = ASSETS_PATH / directory

        # Define colores que el shader va a usar
        colors = ctx.inject(_color_generator)
        chan_id = ctx.inject(_channel_generator)
        for i in range(256):
            self.values.append(next(colors))
        while len(self.values) > (self.max + 1):
            self.values = self.values[0:-1]
        self.channel = next(chan_id)
        PostShader.all_shaders.add(self)
    
    def update(self, player):  # Selector = jugador al que se actualiza
        target = utils.selector(player)
        execute as target at @s:
            for node in generate_tree(range(self.max + 1)):
                append function node.parent:
                    if node.partition(4):
                        if score var self.source matches node.range function node.children
                    else:
                        if score var self.source matches node.range:
                            self.values[node.value].play()
                            # pos = node.value/50
                            # particle minecraft:flame ~1 ~pos ~ 0 0 0 1 0 force @s
                            #
                            # estos comandos comentados de arriba son en caso de que no se sepa
                            # si hay una partícula reproduciéndose o no.

    def __repr__(self):
        return str(self.name)


class Overlay:
    all_elements = set()

    def __init__(self, name, directory=""):
        self.name = name
        self.directory = ASSETS_PATH / directory

# Construcción de los Shaders
@defer  # Es necesario poner esto para que se pueda leer bien la lista de todos los shaders creados después del Runtime.
def deferred_shaders():
    if len(PostShader.all_shaders) != 0:
        textures = ctx.assets.textures
        json_shaders = ctx.assets.shaders
        frag_shaders = ctx.assets.fragment_shaders
        vert_shaders = ctx.assets.vertex_shaders
        glsl_shaders = ctx.assets.glsl_shaders

        # Se amplía el buffer para que cada post shader tenga su espacio
        json_shaders["minecraft:post/transparency"] = Shader(source_path = CURRENT_PATH / "private/shader/transparency_1.txt")
        json_transparency = json_shaders["minecraft:post/transparency"]

        amount = 1 + len(PostShader.all_shaders)

        json_transparency.text += f'            "width": 2,\n'
        json_transparency.text += f'            "height": {amount}\n'
        json_transparency.text += f'        }},\n'
        json_transparency.text += f'        {{\n'
        json_transparency.text += f'            "name": "controllerSwap",\n'
        json_transparency.text += f'            "width": 2,\n'
        json_transparency.text += f'            "height": {amount}\n'

        json_transparency.text += Shader(source_path = CURRENT_PATH / "private/shader/transparency_2.txt").text


        # Se crean los samplers para cada overlay
        for image in Overlay.all_elements:
            overlay_path = image.directory / (image.name + ".png")
            image_sampler = image.name + "Sampler"
            image_w = PIL.Image.open(overlay_path).size[1]
            image_h = PIL.Image.open(overlay_path).size[0]
            json_transparency.text += f',\n'
            json_transparency.text += f'                {{"name": "{image_sampler}", "id": "{image.name.lower()}", "width": {image_w}, "height": {image_h}, "bilinear": false}}'

        json_transparency.text += f'\n'
        json_transparency.text += Shader(source_path = CURRENT_PATH / "private/shader/transparency_3.txt").text


        # En el particle shader se agrega todo lo necesario para que puedan entrar todos los post shaders.
        frag_shaders["minecraft:core/particle"] = FragmentShader(source_path = CURRENT_PATH / "private/shader/particle_1.fsh")
        frag_particle = frag_shaders["minecraft:core/particle"]
        
        for elem in PostShader.all_shaders:
            frag_particle.text += f'            || (abs(tint.g * 255. - {254 - elem.channel}.) < .5 && iCoord != ivec2(0, {2 * (elem.channel - 1)}))'
        frag_particle.text += f'\n'
        frag_particle.text += FragmentShader(source_path = CURRENT_PATH / "private/shader/particle_2.fsh").text
        
        vert_shaders["minecraft:core/particle"] = VertexShader(source_path = CURRENT_PATH / "private/shader/particle_1.vsh")
        vert_particle = vert_shaders["minecraft:core/particle"]

        number = len(PostShader.all_shaders)
        vert_particle.text += f'{254 - number}.0;\n'
        vert_particle.text += VertexShader(source_path = CURRENT_PATH / "private/shader/particle_2.vsh").text



        frag_shaders["minecraft:program/toggler/findcolor"] = FragmentShader(source_path = CURRENT_PATH / "private/shader/findcolor.fsh")
        frag_findcolor = frag_shaders["minecraft:program/toggler/findcolor"]

        # En Findcolor se agrega la ID de cada post shader para que los reconozca.
        for elem in PostShader.all_shaders:
            frag_findcolor.text += f"        case {elem.channel}:\n"
            frag_findcolor.text += f"            readMarker(fragColor, lastValue, ivec2(0, {2 * (elem.channel - 1)}), vec2(254., {254 - elem.channel}.), {elem.channel});\n"
            frag_findcolor.text += f"            break;\n"
        frag_findcolor.text += f"    }}\n"
        frag_findcolor.text += f"}}"
        

        # Main
        frag_shaders["minecraft:program/toggler/shader"] = FragmentShader(source_path = CURRENT_PATH / "private/shader/shader_1.fsh")
        frag_main = frag_shaders["minecraft:program/toggler/shader"]

        json_shaders["minecraft:program/toggler/shader"] = Shader(source_path = CURRENT_PATH / "private/shader/shader_1.txt")
        json_main = json_shaders["minecraft:program/toggler/shader"]
        
        # Importa todos los overlays
        for image in Overlay.all_elements:
            overlay_path = image.directory / (image.name + ".png")
            image_sampler = image.name + "Sampler"
            json_main.text += f',\n'
            json_main.text += f'        {{"name": "{image_sampler}"}}'

            effect_location = f"minecraft:effect/{image.name.lower()}"
            textures[effect_location] = Texture(Image.open(overlay_path).transpose(Image.FLIP_TOP_BOTTOM))

        json_main.text += f"\n"
        json_main.text += Shader(source_path = CURRENT_PATH / "private/shader/shader_2.txt").text
        
        frag_main.text += FragmentShader(source_path = CURRENT_PATH / "private/shader/shader_2.fsh").text


        # Se importan todos los post shaders creados.
        for elem in PostShader.all_shaders:
            shader_path = elem.directory / (elem.name + ".fsh")
            text = Shader(source_path=shader_path).text
            frag_main.text += f"    control_color = texelFetch(ControlSampler, ivec2(0, {elem.channel}), 0);\n"
            frag_main.text += f"    if(control_color.b != 0.0) {{\n"
            frag_main.text += f"float score = control_color.b;\n"
            frag_main.text += f"{text}"
            frag_main.text += f"\n    }}\n\n    "
        
        frag_main.text += f"\n"
        frag_main.text += f"    if(overlay.a > 0.0) {{\n"
        frag_main.text += f"        fragColor.rgb = mix(fragColor.rgb, overlay.rgb, overlay.a).rgb;\n"
        frag_main.text += f"    }}\n"
        frag_main.text += f"}}\n"


        # Se generan los demás archivos necesarios para que si no hay shaders, no se genere pack.
        json_shaders["minecraft:core/particle"] = Shader(source_path = CURRENT_PATH / "private/shader/particle.json")
        json_shaders["minecraft:program/toggler/copy"] = Shader(source_path = CURRENT_PATH / "private/shader/copy.json")
        json_shaders["minecraft:program/toggler/findcolor"] = Shader(source_path = CURRENT_PATH / "private/shader/findcolor.json")
        json_shaders["minecraft:program/toggler/remove"] = Shader(source_path = CURRENT_PATH / "private/shader/remove.json")

        vert_shaders["minecraft:program/toggler/copy"] = VertexShader(source_path = CURRENT_PATH / "private/shader/copy.vsh")
        vert_shaders["minecraft:program/toggler/shader"] = VertexShader(source_path = CURRENT_PATH / "private/shader/shader.vsh")

        frag_shaders["minecraft:program/toggler/remove"] = FragmentShader(source_path = CURRENT_PATH / "private/shader/remove.fsh")
        
        glsl_shaders["minecraft:include/emissive_utils"] = GlslShader(source_path = CURRENT_PATH / "private/shader/emissive_utils.glsl")